""" 
<1이 될 때까지>
어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
두 번째 연산은 N이 k로 나누어떨어질 때만 선택할 수 있다.

1. N에서 1을 뺀다.
2. N을 k로 나눈다.

예를 들어, N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의
과정을 두 번 수행하면 N은 1이 된다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다.
이는 N을 1로 만드는 최소 횟수이다. N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는
최소 횟수를 구하는 프로그램을 작성하시오.

<입력조건>
- 첫째 줄에 N(2<= N <= 100,000)과 K(2<= K <= 100,000)가 공백으로 구분되며 각각 자연수로 주어진다. 이때
  입력으로 주어지는 N은 항상 K보다 크거나 같다.

<출력조건>
- 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.

<입력예시>     <출력예시>
25 5           2
"""

n, k = map(int, input().split())

result = 0

while True:
  # n이 k로 딱 나누어떨어진다면
  if (n % k == 0):
    # n을 k로 나눈 후 횟수를 1 올림.
    n = (n // k)
    result += 1
  # 나누어 떨어지지 않는다면
  else:
    # n이 k보다 작다면 횟수에 (n을 k로 나눈 나머지 -1)을 더해준다. 그리고 n의 값도 같은 수로 빼준다.
    if (n < k):
      result += (n % k) -1
      n -= ((n % k) - 1)
    # n이 k보다 크다면 횟수에 (n을 k로 나눈  나머지)를 더해준다. 그리고 n의 값도 같은 수로 빼준다.
    else:
      result += (n % k)
      n -= (n % k)
  # n이 1이라면 무한루프를 빠져나온다.
  if (n == 1):
    break

print(result)